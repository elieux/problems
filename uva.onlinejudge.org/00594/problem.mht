Content-Type: multipart/related; start=<op.mhtml.1349187059348.4eed17537d4bb30e@192.168.168.128>; boundary=----------rR4POyfGTx3AFe6w3eFaFt
Content-Location: http://uva.onlinejudge.org/external/5/594.html
Subject: =?utf-8?Q?One=20Little,=20Two=20Little,=20Three=20Little=20Endians?=
MIME-Version: 1.0

------------rR4POyfGTx3AFe6w3eFaFt
Content-Disposition: inline; filename=594.html
Content-Type: text/html; charset=iso-8859-1; name=594.html
Content-ID: <op.mhtml.1349187059348.4eed17537d4bb30e@192.168.168.128>
Content-Location: http://uva.onlinejudge.org/external/5/594.html
Content-Transfer-Encoding: 8bit

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>One Little, Two Little, Three Little Endians</TITLE>
<META NAME="description" CONTENT="One Little, Two Little, Three Little Endians">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
One Little, Two Little, Three Little Endians</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Writing programs that are completely portable across different operating systems, operating system 
versions and hardware platforms is a challenging task.  One of the difficulties encountered is a result of 
decisions made by hardware manufacturers about how they will store integer data in memory.  Because 
these representations can differ from machine to machine, sharing binary data often cannot be done 
without modifying the way in which the data is stored or the way in which it is handled by one or more 
of the platforms.

<P>

<P>
<BR>
Fortunately there is near-universal agreement among hardware manufacturers that addressable memory 
be ordered into 8-bit bytes.  For integer data values that require more than 8-bits, such as the typical 2-
byte, 4-byte, and 8-byte integer types available on most modern hardware, there is no such agreement 
and two incompatible storage schemes exist.  The first stores integers as groups of consecutive 8-bit 
bytes with the least significant byte occupying the lowest memory location within the group and the 
most significant byte occupying the highest memory location.  The second is just the reverse; the least 
significant byte is stored in the highest memory location within the group, and the most significant byte 
is stored in the lowest memory location.  The computing industry has dubbed these schemes Little 
Endian and Big Endian, respectively.  There is also near-universal agreement that signed integers are 
stored using "two's complement" representation, and you may assume that this is the case.

<P>

<P>
<BR>
When binary integer data is shared between a Little Endian and Big Endian machine, a data conversion 
must be performed which involves reversing the bytes of the data.  Once the bytes have been reversed 
the integer is then correctly interpreted by the hardware as the original value from the opposite-endian 
machine.  The object of this problem is to write a program that will read a list of integers and report the 
integers that the binary representations of the input integers would represent on an opposite-endian 
machine.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of a list integers.  The end of the input file marks the end of the list.  All input 
integers can be represented as a 32-bit signed integer value.  That is, the input integers will be in the 
range -2147483648 to 2147483647.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input integer a single line should be printed to the output file.  The line should contain the 
input integer followed by the phrase ``<TT>converts to</TT>" followed by one space followed the other-endian  value.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
123456789
-123456789
1
16777216
20034556
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
123456789 converts to 365779719
-123456789 converts to -349002504
1 converts to 16777216
16777216 converts to 1
20034556 converts to -55365375
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

------------rR4POyfGTx3AFe6w3eFaFt
Content-Disposition: inline; filename=htmlatex.css
Content-Type: text/css; name=htmlatex.css
Content-Location: http://uva.onlinejudge.org/external/5/htmlatex.css
Content-Transfer-Encoding: 8bit


/* Century Schoolbook font is very similar to Computer Modern Math: cmmi */
.MATH    { font-family: "Century Schoolbook", serif; }
.MATH I  { font-family: "Century Schoolbook", serif; font-weight: bold }
.BOLDMATH { font-family: "Century Schoolbook", serif; font-weight: bold }

/* implement both fixed-size and relative sizes */
SMALL.XTINY		{ font-size : xx-small }
SMALL.TINY		{ font-size : x-small  }
SMALL.SCRIPTSIZE	{ font-size : smaller  }
SMALL.FOOTNOTESIZE	{ font-size : small    }
SMALL.SMALL		{  }
BIG.LARGE		{  }
BIG.XLARGE		{ font-size : large    }
BIG.XXLARGE		{ font-size : x-large  }
BIG.HUGE		{ font-size : larger   }
BIG.XHUGE		{ font-size : xx-large }

/* document-specific styles come next */

------------rR4POyfGTx3AFe6w3eFaFt--
